#!/usr/bin/env node

// Module dependencies.
var app = require('../app');
var debug = require('debug')('pulse-server:server');
var http = require('http');

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);

// Socket.io instance
var io = require('socket.io')(server);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// ------------ MOSCA --------------//
var mosca = require('mosca');

var moscaBroker = new mosca.Server( { port : 1883 } );
var clientID;
// log when mosca broker running.
moscaBroker.on('ready', function () {
  console.log('Mosca server is up and running in port 1883')
});

// log client connected
moscaBroker.on('clientConnected', function(client) {
  clientID = client.id;
  console.log('mqtt client connected : ', client.id);
});

// Forward mqtt data to socket
moscaBroker.on('published', function(packet, client) {
  if(typeof client != 'undefined'){
    console.log('Published Data : ', packet.payload.toString('utf-8'));
    // forward via socket io (data object js)
    io.emit('stream/' + client.id , {
      id : client.id,
      data : packet.payload.toString('utf-8') //int string
    });
    console.log('etest');
  }
});